==========================================================================================================
==========================================================================================================
												READ ME
==========================================================================================================
==========================================================================================================


VERSION DE BASE DE DATOS LOCAL		=		MODIFICACIONES
==========================================================================================================
		DB4_1.db3					=		
==========================================================================================================
		DB4_1_1.db3					=		*Se agrego como atributo a la tabla personas la fecha de 
									=		nacimiento de la persona a registrar, ademas estructurar la
									=		la logica de validacion que cumplan las condiciones del dato
									=		suministrado.
									=
									=		*Se valido la des-seleccion de la opcion de menu que es seleccionada
									=		por el usuario al navegar.
									=
									=		*Cuando un usuario ingresa, en su pagina de informacion 
									=		(MasterDetail MainPage) se registra cual fue su ultima conexion
									=		(es decir la fecha y hora del reciente ingreso) y se muestra
									=		la fecha y hora del ingreso previo.
									=
									=		*Se preparo una pre-configuracion -no habilitada en el momento-
									=		de Persona y Usuarios que exitiran por default en la aplicacion.
									=		Hasta el momento solo hay tres usuarios registrados: Administrator,
									=		ArturoDazaB, y RamonColina.
									=
									=		*Se creo la pagina de configuracion para usuarios de bajo nivel.
									=		Esta solo permite que el usuario modifique los siguientes campos:
									=			-FECHA DE NACIMIENTO
									=			-NUMERO TELEFONICO
									=			-DIRECCION DE CORREO
									=			-CONTRASEÑA
									=
									=		*Se adicionaron una variedad de iconos utilizados para representar
									=		el boton de salida o 'X' que cierra la pagina. Esto solo sera visible
									=		en paginas del tipo Pop-Up:
									=			Iconos: -Cerrar24px1.png
									=					-Cerrar24px2.png
									=					-Cerrar32px.png
									=
									=		*Se creo un objeto en la clase Personas, el cual registra los
									=		los datos previos y las modificaciones realizadas a los objetos
									=		Personas y Usuario asignados a una usuario de la aplicacion.
									=
									=
									=		*Se modifico la seccion de informacion de usuario para la MasterPage
									=		la cual sera populada mediante MVVM
									=
									=		*En la clase Configuracion.xaml.cs se estructuro el comando de 
									=		clausura de la navegacion para que todos los datos que han sido
									=		modificados puedan ser refrescado para las otras paginas
									=
									=		*Se agrego el diseño de la pagina ConfiguracionAdmin.xaml.cs, la
									=		cual es una ventana solo disponible para el usuario administrador.
									=		Esta permite hacer busqueda de registros mediante la solicitud de
									=		datos como: Cedula (ID), Nombre(s), Apellido(s) y Username (nombre
									=		de usuario). Luego de realizar la busqueda los registros encontrados
									=		seran desplegados en un ListView (ListViewPersonas), el cual solo sera
									=		visible bajo dos condiciones:
									=
									=		1) Al dar click en el boton "Buscar" debe de existir al menos un caracter
									=		o dato. 
									=
									=		2) Se debe consegui al menos un resultado de busqueda para que 
									=		este pueda ser desplegado, de lo contrario la ListViewPersonas
									=		(la cual cada que se realiza una busqueda se inicializa como
									=		nulo) no tendra ningun valor almacenado.
									=		
									=		Luego de todo esto, el usuario Administrator puede realizar
									=		las modificaciones pertinentes sobre los usuarios suministrados
									=		luego de la busqueda. Esto se logra haciendo click sobre el registro
									=		que se desea en la ListView "ListViewPersonas". Al hacerlo, la
									=		aplicacion arrojara un mensaje tipo PopUp realizando la pregunta
									=		"¿Desea modificar datos de este usuario?". De ser "Si" la respuesta
									=		se realizara un salto a una nueva ventana con todos los datos "Personales"
									=		y de "Usuarios" que esa persona tiene registrada en la aplicacion.
									=
									=		*Se adiciono los plugin Zxing.Net.Mobile y Zxing.Net.Mobile.Forms
									=		los cuales son los encargados de aperturar la camara y realizar la 
									=		lectura de codigo de barras.
									=		
									=		*Se creo una nueva tabla que registra cuando, quien y que atributo 
									=		fue modificado en 
==========================================================================================================
==========================================================================================================
		DB4_1_2.db3					=		*Se modifico el ingreso del usuario a la plataforma. El 
									=		metodo de loggeo se realizara directamente desde la pagina
									=		principal, eliminando asi la pagina del tipo PopupPage que era
									=		llamada luego de presionar el boton "Ingresar" en la MainPage.xaml.cs
									=
									=		*Se adiciono el "MTTP APP.iOS" al proyecto
									=
									=		*Se creo la pagina PaginaQueryAdmin, la cual generara la busqueda
									=		de usuarios dentro de la aplicacion, para luego ser enviados a la
									=		pagina PaginaConfiguracionAdmin, la cual permite modificar todos
									=		los campos excepto el campo Cedula (ID)
									=
									=		*Se preparo el terreno para la inclusion de la arquitectura de 
									=		programacion MVVM para las paginas PaginaConfiguracionAdmin y
									=		PaginaConfiguracion
									=
									=		*Se crearon las tablas de Tableros y HistorialTableros
==========================================================================================================
==========================================================================================================
		DB4_1_3.db3					=		*Se adiciono el atributo ID a la tabla UltimaConexion
									=		
									=		*Con el proposito de adicionar la arquitectura MVVM sobre
									=		la pagina PaginaConfiguracionAdmin se decidio trabajar solo
									=		con la clase ViewModel, esto puesto que esta pagina trabaja
									=		como una pagina de lectura y escritura (de haber sido unicamente
									=		lectura de informacion se trabajaria con el modelo Model - View
									=		ViewModel), de esta manera se creo la pagina/ventana
									=		"PaginaConfiguracionAdmin.xaml.cs", la cual llamara a la clase
									=		ViewModel "ConfiguracionAdmin2ViewModel". Esta ultima clase
									=		puede ser usada tambien en la pagina/ventana
									=		"PaginaConfiguracion" (Pagina para usuarios de bajo nivel)
									=		
									=		*Tambien se creo la pagina "PaginaConfiguracion2.xaml.cs"
									=		bajo el mismo esquema que la pagina "PaginaConfiguracionAdmin2.xaml.cs"
									=		para que estas dos paginas trabajaran con la misma clase ViewModel
									=		"ConfiguracionAdmin2ViewModel" (Se recomienda cambiar el nombre
									=		de la clase a uno pueda englobar a las dos paginas de configuracion
									=		de datos: "ConfiguracionViewModel")
									=
									=		*Se agregaron nuevas propiedades a la clase "ConfiguracionAdmin2ViewModel.cs"
									=		para que pueda funcionar como ViewModel para la pagina "PaginaRegistro.xaml"
									=
									=		*Se modifico la clase "PaginaRegistro.xaml.cs" con la finalidad
									=		de que trabajara bajo el esquema MVVM utilizando la clase
									=		"ConfiguracionAdmin2ViewModel.cs". De esta manera, las paginas
									=		"PaginaRegistro", "PaginConfiguracion2" y "PaginaConfiguracionAdmin2"
									=		(puesto que trabajan con la modificacion y creacion de objetos del tipo
									=		Personas, Usuarios y UltimasModificaciones -Caso unico para las paginas
									=		PaginaConfiguracion2 y PaginaConfiguracionAdmin2- ) utilizaran las misma
									=		clase ViewModel, de esta manera todo el arreglo de la data para estas 3 
									=		paginas quedara comandada o dictada por la clase "ConfiguracionAdmin2ViewModel.cs".
									=
									=		*Se crearon dos clases nuevas para sustituir a las clases
									=		MasterPageUserinfo.cs, DetailPageUserInfo.cs(la cual funcionaba como clase Modelo
									=		para la pagina MasterPage.xaml.cs y DetailPage.xaml.cs) y las
									=		clases MasterPageUserInfoViewModel.cs y DetailPaerUserinfo.cs
									=		(las cuales funcionaban como clases ViewModel para sus res-
									=		pectibas paginas), estas nuevas clases llevan por nombre
									=		MasterPageUserInfoModel.cs y MasterPageUserInfoViewModel.cs.
									=		Esto se hizo con la finalidad de evitar crear muchas clases
									=		que manejaran casi la misma informacion, ademas estas nuevas clases
									=		se crearon bajo el mismo concepto de la clase ConfiguracionAdmin2ViewModel.cs.
									=
									=		*Se creo la pagina de registro de tablero y la clase RegistroTableroViewModel.cs
									=		que acompaña a esta como su clase ViewModel.
									=
									=		*Se utilizo el mismo plugin (ZXing) para generar un coigo QR desde
									=		la aplicacion. 
									=		NOTA: SE PLANEA UTILIZAR OTRA CLASE COMO PLAN B
									=
									=		*Se adiciono un segundo plugin (QRCoder) como metodo alternativo
									=		para generar los codigos QR. De esta manera la aplicacion cuenta
									=		con dos plugin para los codigos QR:
									=			1) ZXing => Lectura de COdigo QR
									=			2) QRCoder => Creacion de codigo QR
									=
									=		*Se creo la interface IPicture para poder activar el metodo 
									=		save picture en cada una de las plataformas que soporta el
									=		proyecto (Android y iOS) junto con la clase Picture.cs (la
									=		cual existe en cada una de las plataformas). Este metodo 
									=		permite que los codigos QR que se creen en la aplicacion
									=		puedan ser almacenados en la galeria del telefono.
==========================================================================================================
==========================================================================================================
		DB4_1_4.db3					=		*Se adicinaron nuevos atributos en la clase Tableros, que llevan
									=		por nombre: CodigoQRData(Informacion de la imagen en forma de texto)
									=		y CodigoQRFilename (nombre del archivo imagen que representara
									=		el codigo QR).
									=
									=		*En un primer escenario se creo en la clase "RegistroTableroViewModel.cs"
									=		un metodo para realizar el llamado a la pagina de scaneo (ZXing.NET.Mobile scanPage)
									=		sin embargo esto genero muchos conflictos entre los tiempos de ejecucion
									=		(a veces se realizaba el escaneo y lectura del codigo sin obtener
									=		de vueltas el payload que este contiene apesar de haber sido
									=		leido satisfactoriamente), debido a todo lo previamente expuesto
									=		se decidio mover este metodo para que sea ejecutado en la clase
									=		"PaginaConsultaTablero.xaml.cs".
									=
									=		*Se modifico el metodo Mayuscula de la clase Metodos.
									=
									=		*Se escribio el codigo usado en el metodo Registro llamado desde
									=		la pagina "PaginaRegistroTableros.xaml.cs". En este se evalua si:
									=			1)Existe algun registro de tableros (de no exitir ningun registro
									=			  previo se procedera a saltar los metodos consulta de registro y
									=			  se procedera a realizar el primer registro de tablero).
									=			2)El ID del tablero que se desea registrar ya lo posee algun otro
									=			  tablero que se encuentra registrado.
									=			3)La data del codigo QR del tablero que se desea registrar ya lo posee
									=			  otro tablero que se encuentra registrado.
									=
									=		*Se creo la pagina "PaginaConsultaTablero.xaml.cs" (mencionado
									=		previamente), en la cual alberga dos botones: Consulta por escaneo
									=		(ESCANEO) y consulta por ID (Busqueda de ID del tablero). Cualquiera
									=		que sea la opcion seleccionada, al obtener el payload de algun codigo
									=		qr (SCANEAR) o ingresar el ID del tablero (consulta por tablero), este 
									=		es comparado con el ID de cada registro de la tabla "Tableros". De ser
									=		acertiva la consulta y encontrar el tablero que se desea consultar toda
									=		la informacion de este sera desplegada en la parte inferior a los botones
									=		de consulta y se mostrara (como informacion basica): ID del tablero, Filial
									=		a la que pertenece el tablero, area de la filial a la que pertenece el tablero
									=		la ultima vez que se realizo una consulta a ese tablero y el codigo qr
									=		asignado a ese tablero (imagen).
									=
									=		*Se creo una clase del tipo ViewModel que lleva por nombre
									=		"PaginaInformacionViewModel.cs". Esta clase contendra la 
									=		configuracion basica (tamaño de fuente y colores, etc).
									=
									=		*Se realizaron modificaciones sobre la clase "ConfiguracionAdminViewModel.cs"
									=		donde se adicionaron nuevas propiedades estaticas para que las 
									=		paginas que utilizan esta clase para organizar la data
									=		sepan que puedan tener las mismas etiquetas.
==========================================================================================================
==========================================================================================================
		DB4_2						=		*Se agrego el atributo "SapID" a la tabla "Tableros".
									=		Esto se hizo con la finalidad de crear un paralelismo con
									=		la base de datos de SAP.
									=
									=		*Se modifico la pagina "PaginaRegistro.xaml.cs". Se elimino
									=		el ingreso del nombre de usuario, en vez de esto el nombre de
									=		usuario se generara bajo la siguiente premisa:
									=
									=			Username = Inicial 1er Nombre + apellido
									=
									=		En caso de que exista personas que compartan la misma inicial
									=		del primer nombre y el mismo apellido el nombre de usuario
									=		se generara bajo la siguiente premisa:
									=		
									=			Username = Inicial 1er Nombre + Inicial 2do Nombre + apellido
									=
									=		Para realizar todas estas modificaciones se creo una nueva pagina
									=		del tipo ContentPage llamada "PaginRegistro2.xaml.cs".
==========================================================================================================
==========================================================================================================
		DB4_2_3						=		*Se modificaron las secciones de fechas en las paginas
									=		"PaginaConfiguracion.xaml.cs" y "PaginaConfiguracionAdmin.xaml.cs"
									=		modificando: En la pagina "PaginaConfiguracion.xaml.cs" se 
									=		removio la posibilidad de realizar modificaciones sobre la 
									=		fecha de nacimiento, sigue desplegandose mediante el input/output
									=		DatePicker, sin embargo para evitar modificaciones se deshabilito
									=		la posibilidad de interaccion con el usuario, ademas de replicar
									=		lo mismo para la "Fecha de Creacion".
									=
									=		En la pagina "PaginaConfiguracionAdmin.xaml.cs" se realizo lo mismo
									=		con la informacion de la "Fecha de Creacion".
									=
									=		*Se agregaron a la clase "Usuarios" la propiedad "NivelUsuario"
									=		del tipo int. Esta variable sera usada para jerarquizar a los 
									=		usuarios de la plataforma, esto con la finalidad de seleccionar
									=		
									=		*Se agrego a la clase "Personas" la propiedad "NumeroFicha" del
									=		tipo int. Esta variable sera usada como un atributo guia extra.
									=		Este representara el numero de ficha que poseen los trabajadores
									=		dentro de la red corporativa.
									=
									=		*Se modificaron las clases:
									=			-ConfiguracionAdmin.cs
									=			-PaginaRegistro2.xaml.cs
									=			-PaginaConfiguracion.xaml.cs
									=			-PaginaConfiguracionAdmin.xaml.cs
									=		Todo esto para poder agregar los campos "Numero de Ficha" y 
									=		"Nivel de Usuario".
									=
									=		*Se modificaron las clases:
									=			-Opciones.cs
									=			-OpcionesViewModel.cs
									=		Se agregaron nuevas listas de opciones, ademas de cambiar
									=		llamados entre clases.
									=
									=		*Se modifico la clase MasterPage.xaml.cs, cambiando el metodo
									=		de llamado a la lista de opciones y determinar que lista de 
									=		opciones corresponde al usuario de acuerdo al nivel de usuario
									=		que este posea.
==========================================================================================================
==========================================================================================================
		DB4_2_4						=		*Se modificaron todas las clases pertenecientes a las paginas
									=		de informacion: 
									=			-Pagina Informacion Configuracion
									=			-Pagina Informacion Consulta Tablero
									=			-Pagina Informacion Registro
									=			-Pagina Informacion Registro Tablero
									=
									=		Ademas de agregar nuevas propiedades y funciones a la clase
									=		"PaginaInformacionViewModel.cs"
									=		
									=		*Se adiciono la funcion "OnBackButtonPressed" a la clase
									=		"DetailPage.xaml.cs" el cual bloquea el boton fisico del 
									=		sistema Android, causando de esta manera que la unica manera
									=		de desloggearse o dejar de navegar con un usuario en la plataforma
									=		sea mediante la opcion "Salir" en el menu de opciones de la clase
									=		"MasterPage.xaml.cs".
									=
									=		*Se migro el codigo de las clases "PaginaRegistro2.xaml" y
									=		"PaginaRegistro2.xaml.cs" a las clases "PaginaRegistro.xaml" y
									=		"PaginaRegistro.xaml.cs".
									=
									=		*Se creo la clase "PaginaPrincipalViewModel.cs".
									=
									=		*Se modifico la clase "PaginaQueryViewModel.cs" dotandola 
									=		de nuevas propiedades y metodos.
									=
									=		*Se adiciono a las paginas: "PaginaPrincipal.xaml.cs" y 
									=		"PaginaQuery.xaml.cs" objeto "ActivityIndicator"
==========================================================================================================
==========================================================================================================
		DB4_2_4_2					=		*Se crearon nuevos objetos dentro de la clase "Tablas.cs":
									=			-ActivoSAP
									=			-Items
									=
									=		Ademas de la modificacion del objeto "Tableros".
									=
									=		El objeto "ActivoSAP" se encuentra destinado a acompañar a 
									=		cualquier objeto, dentro de la aplicacion, que represente 
									=		algun activo fisico (como es el caso de los tableros).
									=
									=		Este posee los siguientes campos/atributos:
									=			-SapID -> Codigo SAP para dicho elemento
									=			-Descripcion -> Descripcion del elemento
									=		
									=		El objeto "Items" se encuentra destinado a representar de manera
									=		individual cada uno de los componentes, piezas o elementos
									=		que forman parte de un objeto activo. Estos, al igual que los 
									=		activos poseen un codigo y una descripcion. Es a razon de lo
									=		previamente planteado que estos objetos son "derivados" de 
									=		los objetos del tipo "ActivoSAP".
									=
									=		Este posee los siguientes campos atributos:
									=			-Atributos heredados del objeto "ActivoSAP"
									=			-Presentacion -> En que tipo de presentacion viene la
									=							 minima expresion de dicho item.
									=			-Cantidad -> Cantidad de items.
									=		
									=		Por ultimo, se modifico el objeto "Tableros" para que
									=		fueran un objeto derivado del objeto "ActivoSAP", esto
									=		para poder heredar los atributos "SapID" y "Descripcion".
									=
									=		*Se adiciono a la pagina "PaginaConsultaTablero" una tercera
									=		opcion de busqueda que funcionara igual que el metodo de 
									=		busqueda por ID (Tablero ID). En la seccion de "Busqueda Por
									=		ID" (x:Name = "FrameConsultaID") se agrego un picker que per-
									=		mirita seleccionar al usuario si desea realiar la consulta
									=		usando como referencia el ID del tablero o el ID de SAP.
									=
									=		*Se adicono en la clase "RegistroTableroViewModel" una nueva
									=		propiedad que lleva por nombre "Opciones" (List<string>). Es
									=		esta propiedad se llenara con las opciones de busqueda por ID
									=       en la pagina "PaginaConsultTablero", donde solo exitiran las 
									=		opciones: 
									=			
									=			a) Tablero ID (Consulta realizada con el ID del tablero).
									=			b) SAP ID (Consulta realizada con el ID de SAP asignado
									=			   a dicho tablero).
									=
									=		*Se modifico la clase Tableros, donde antes existia como 
									=		una clase derivada de la clase "ActivosSAP". Ahora esta clase
									=		no es derivada de ninguna otra, ademas de agregar los 
									=		campos que obtenia cuando era una clase derivada de 
									=		"ActivosSAP".
									=
									=		*Se modifico la clase "Items". Se cambio su nombre por 
									=		"ItemsTableros", ademas de que ya no es una clase derivada 
									=		de la clase "ActivoSAP". Sin embargo, es debido a esto ultimo
									=		que se tuvieron que agregar nuevos atributos:
									=
									=			-Id(int)[PrimaryKey, AutoIncremental]
									=			-TableroID(string)
									=			-Descripcion(string)
									=		
									=		Y tambien se elimino el atributo "Presentacion" (string).
									=
									=		*Se realizaron adiciones y modificaciones sobre los archivos
									=		"PaginaRegistroTablero.xaml" y "PaginaRegistroTablero.xaml.cs"
									=		para poder añadir la nueva seccion de ingreso de los items 
									=		pertenecintes al tablero.
									=
									=		*Se realizaron adiciones y modificaciones sobre en la clase
									=		"RegistroTableroViewModel", esto para poder agregar los 
									=		atributos utilizados en el registro de los items del tablero.
==========================================================================================================
==========================================================================================================
		DB4_2_4_3					=		*Se creo el metodo "AddItem" dentro de la clase "PaginaRegis-
									=		troTablero". Esta clase se encarga de tomar los valores 
									=		"Descripcion" y "Cantidad" de la seccion "Items Del Tablero"
									=		Esta crea una lista del tipo "ItemsTablero" y va adicionando
									=		nuevos items cada que se oprima el boton "Añadir Item".
==========================================================================================================
==========================================================================================================
		DB4_2_4_5					=		*Se adicionaron elementos a la clase "PaginaConsultaTablero"
									=		donde se puede visualizar los elementos internos del tablero.
==========================================================================================================
==========================================================================================================
		DB4_2_5						=		*Se modifico el metodo "Caracteres" dentro de la clase 
									=		"Metodos". Esta clase evalua si alguna cadena de caracteres
									=		posee caracteres especificos. Se removio el caracter '+' de 
									=		la lista de caracteres no permitidos.
									=
									=		*Se creo el archivo "DTO.cs" el cual sera el encargado de
									=       de contener a las clases "DTO" (Data Transfer Object o 
									=       Objetos de Transferencia de Datos).
									=
									=		*Se crearon las clases "ConfiguracionU" y "ConfiguracionA" 
									=       (donde esta ultima es una clase derivada de "ConfiguracionU).
									=	    Estas clases seran las resposables de enviar, mediante soli-
									=       citudes HTTP, los nuevos datos del usuario a modificar. Se
									=       crearon dos clases debido a los distintos niveles de modifica-
									=       cion permitidos (modificacion de usuario => Cedula, Telefono
									=       Correo y Password; modificaciones de Administrador => Cedula, 
									=       Nombres, Apellidos, FechaNacimiento, Telefono, Correo, 
									=       Username y Password).
									=
									=       *Se creo la clase "InformacionGeneral". Esta clase contendra
									=		solo dos parametros: <Personas> Persona (Un atributo del ti-
									=       po "Personas" con toda la informacion Personal del usuario),
									=       y <Usuarios> Usuario (Atributo del tipo "Usuarios" con toda
									=       la informacion de usuario del usuario). Clase diseñada para
									=       contener toda la informacion del usuario que acaba de logear
									=       se dentro de la plataforma.
									=
									=       *Se creo la clase "LogInResponse". Esta clase se encuentra 
									=       formada por dos propiedades: <InformacionGeneral> UserInfo
									=       (Atributo que contendra toda la informacion del usuario que
									=       acaba de logearse dentro de la plataforma), y <DateTime> 
									=       UltimaFechaIngreso (Atributo que contendra la fecha y hora
									=       del ultimo logeo del usuario dentro de la plataforma).
									=
									=       *Se creo la clase "QueryAdmin". Esta clase se encuentra for-
									=       mada por tres propiedades: <double> Cedula, <stirng> Nombres,
									=       <string> "Apellidos". Esta clase se usa como clase modelo para
									=		la lista de usuarios que es retornada por el controlador 
									=       "LogInController" luego de realizar la solicitud HTTP en la 
									=       pagina "PaginaQueryAdmin".
									=
									=       *Se creo la clase "RegistroTablero". Esta clase se encuentra
									=       formada por dos propiedades: <Tableros> tableroinfo (propie-
									=       dad del tipo "Tableros" que contendra toda la informacion ba-
									=       sica de un tablero) y <List<ItemTablero>> itemTablero (pro-
									=       piedad que contendra una lista de los items que forman parte
									=       de un tablero.Esta clase es usada en varias ocaciones dentro 
									=       de la aplicacion:
									=       
									=       1) Usada en la pagina "PaginaRegistroTablero". Aqui, se envia
									=       en una solicitud HTTP el objeto "RegistroTablero" junto con 
									=       toda la informacion del tablero a registrar.
									=
									=       2) Usada en la pagina "PaginaConsultaTablero". Aqui se envia 
									=       en una respuesta HTTP el objeto "RegistroTablero" con toda
									=       la informacion del tablero consultado (por escaner o por
									=       consulta de Id).
									=
									=       *Se creo la clase "RequestConsultaTablero". Esta clase se
									=       encuentran formada por tres propiedades: <double> UserId 
									=       (Id/cedula del usuario que realizo la solicitud), <string>
									=		TableroId (id del tablero consultado) y <string> SapId (Id
									=       SAP del tablero consultado). Esta clase fue creada para ser
									=		enviada como parametro en la solicitud HTTP para la busqueda
									=       de tableros dentro de la plataforma.
									=
									=		*Se creo una nueva version de la aplicacion (nueva branch) la
									=       cual llevara por nombre "MTTOAPP(PruebasWebApi)" reflejando 
									=       asi que las pruebas de comunicacion con los servicios web
									=       creados ("WebApi") se llevaran a cabo en esta version de la 
									=       aplicacion.
==========================================================================================================
==========================================================================================================
		MTTOAPP_V6(WebApi)			=		*Se modificaron los archivos: PaginaPrincipal.xaml.cs, 
									=		PaginaPrincipalViewModel.xaml.cs y App.xaml.cs.
									=
									=		-PaginaPrincipal.xaml.cs => Se modifico el codigo del metodo
									=		"OnIngresar" (Metodo llamado cuando es pulsado el boton
									=		ingresar en la pantalla principal de la aplicacion). En dicho 
									=		metodo se encontraban los comandos para realizar consulta de
									=		la base de datos local con la que trabaja la aplicacion cuando
									=		se encuentra trabajando stand alone. Dichos comandos fueron
									=		movidos a un nuevo metodo dentro de la misma clase, el cual 
									=		llevara por nombre "GetDefaultUsers".
									=
									=		Se codificaron nuevos comandos para realiza el llamado a un 
									=		nuevo metodo creado dentro de la clase "PaginaPrincipalViewModel"
									=		
									=		-PaginaPrincipalViewModel.cs => Se creo el metodo "LogInResponse"
									=		el cual sera el encargado de realizar el consumo del API.
									=
									=		-App.cs => Se crearon dos metodos nuevos: "GetInsecureHandler" Y
									=		"GetDefaultUsers" (ya mencionado previamente). El primer metodo
									=		se encarga de verificar si el certificado de seguridad es emitido
									=		por el localhost, de ser asi permite la conexion entre el cliente
									=		y el servidor.
									=
									=		*Se modificaron los archivos: ConfiguracionAdminViewModel.cs, 
									=		PaginaConfiguracion.xaml.cs, PaginaRegistro.cs, 
									=		UserMainPage.xaml.cs, MasterPage.xaml.cs y DetailPage.xaml.cs
									=
									=		- ConfiguracionAdminViewModel.cs => Se modifico el metodo 
									=		"Save", modificando: El tipo de variable de retorno, pasando 
									=		de "string" a "Task<string>", ademas de cambiar esta varible a 
									=		asincrona (async). Es importante agregar que este metodo es 
									=		usado en tres paginas distintas: PaginaRegistro (pagina de 
									=		escritura debido a que se introducen datos nuevos), Pagina-
									=		Configuracion y PaginaConfiguracionAdmin (paginas de lectura
									=		y escritura debido a que toma valores existentes y los sobre 
									=		escribe). Este metodo internamente identifica desde que pagina
									=		se encuentra el usuario invocando a la clase "Configuracion-
									=		AdminViewModel.cs".
									=
									=		Continuando, se migro la seccion de codigo dentro del metodo
									=		"Save" encargada de realizar la consulta y registro de un nuevo
									=		usuario dentro de la plataforma de manera local (stand alone) a
									=		un nuevo metodo privado miembro de la clase, y de manera homologa
									=		se creo un nuevo metodo privado que se encargara de realizar 
									=		la solicitud HTTP (request) y recibir la respuesta (response)
									=		emitida por el servidor, dichos metodos llevan por nombre
									=		"SaveUserStandAlone" y "SaveUserHttpClient".
									=
									=		Por otro lado, tambien se modifico el contructor de la clase, 
									=		adicionando esta vez un nuevo parametro a solicitar al momento
									=		de invicar la clase => <double> UserId -> Parametro que almacena
									=		el Id/Cedula del usuario que se encuentra loggeado en ese 
									=		momento.
									=
									=		- PaginaRegistro.xaml.cs: En esta clase solo hubieron ligeras
									=		modificaciones, siendo este el caso solo se agregaron las li-
									=		neas de codigo para realiza el llamado del metodo Save de la
									=		clase ConfiguracionAdminViewModel y activar el ActivityIndicator
									=		hasta obtener una respuesta del servidor.
									=
									=		- UserMainPage.xaml.cs, MasterPage.xaml.cs y DetailPage.xaml.cs
									=		En estas tres clases se realizo el mismo procedimiento. Puesto
									=		que anteriormente la aplicacion funcionaba Stand Alone, desde 
									=		los contructores de dichas clases se realizaba la lectura y 
									=		escritura de la base de datos local sqlite, debido a esto, 
									=		se decidio crear un constructor paralelo y/o homologo con 
									=		parametros distintos a los contructores originales, los 
									=		cuales manejaran solo los parametros utilizados en el 
									=		consumo de los servicios web (API).
									=
									=		*Se modificaron los siguientes archivos: 
									=		PaginConfiguracion.xaml.cs, PaginaConfiguracionAdmin.xaml.cs
									=		ConfiguracionAdminViewModel.cs.
									=
									=		- PaginaConfiguracion.xaml.cs: Se realizo la modificacion
									=		del metodo "OnActualizar", donde se hizo la separacion
									=		del codigo que debe ser ejecutado cuando la aplicacion
									=		funciona Stand Alone (El cual se encuentra comentado
									=		para que no sea ejecutado), y se añadieron las lineas de
									=		comando activar el objeto "ActivityIndicator" mientras
									=		se realiza el consumo de APIs de manera asincrona.
									=
									=		- PaginaConfiguracionAdmin.xaml.cs: Se realizo la modificacion
									=		del metodo "OnActualizar", donde se hizo la separacion del
									=		codigo que debe ser ejecutado cuando la aplicacion funciona 
									=		Stand Alone (El cual se encuentra comentado para que no
									=		sea ejecutado), y se añadieron las lineas de comando para 
									=		activar el objeto "ActivityIndicator" mientras se realiza el 
									=		consumo de APIs de manera asincrona.
									=
									=		- PaginaRegistro.xaml.cs: A pesar de que previamente ya 
									=		se habian hecho modificaciones sobre la clase "PaginaRegistro"
									=		esta vez se hizo exactamente el mismo procedimiento
									=		que las modificaciones planteadas previamente.
									=
									=		- ConfiguracionAdminViewModel.cs: Aunque previamente se 
									=		plantearon modificaciones sobre esta clase, debido a que 
									=		se trabajo con las paginas destinadas a la modificacion
									=		- "Configuracion" - de datos, fue necesario realizar
									=		nuevas modificaciones. Para iniciar, justo al igual
									=		que el codigo asignado para el registro de un usuario 
									=		nuevo sobre la plataforma, el codigo usado para la modificacion
									=		de datos de usuario cuando la aplicacion se encuentra trabajando
									=		Stand Alone (modificacion por parte del administrador
									=		mediante la pagina "PaginaConfiguracionAdmin" y modificacion 
									=		por parte de un usuario de bajo nivel mediante la pagina 
									=		"PaginaConfiguracion") fue mudado de metodo, creando asi
									=		los metodos internos: "RegisterUserStandAlone" como el 
									=		metodo llamado cuando se necesita registrar un usuario
									=		nuevo dentro de la plataforma, y "ModifyUserStandAlone"
									=		como el metodo llamado cuando se necesita modificar un
									=		usuario dentro de la plataforma.
									=
									=		Continuando, tambien se crearon metodos homologos que 
									=		que funcionaran para registrar o modificar usuarios dentro 
									=		de la plataforma cuando esta se encuentre consumiento 
									=		servicios web como un cliente HTTP, dichos metodos se 
									=		llaman: RegisterUserHttpClient y ModifyUserHttpClient, 
									=		siendo estos metodos homonimos a los previamente planteados.
									=
									=		*Es importante señalar que se agregaron nuevas propiedades
									=		o variables a la clase "App", llamada en este case "BaseUrl"
									=		y "TimeInSeconds". La primera contendra la base de la direccion
									=		URL de los servicios web o APIs que seran consumidas, y el
									=		segundo contendra el tiempo en segundos que debe esperar
									=		la aplicacion para esperar una respuesta del servidor.
									=
									=		*Se realizaron modificaciones en los siguientes archivos =>
									=		PaginaQueryAdmin.xaml.cs y QueryAdminViewModel:
									=
									=		- PaginaQueryAdmin.xaml.cs: Entre las modificaciones mas 
									=		notables tenemos => 
									=			+ Se añadieron nuevos parametros dentro del contructor
									=			  de la clase "PaginaQueryAdmin". Estos parametros son
									=			  objetos de tipo "Personas" y "Usuarios"
									=			+ Se añadio la seccion de codigo que activa de manera
									=			  asincrona el objeto "ActivityIndicator" mientras que 
									=			  se envia la solicitud HTTP y se recibe una respuesta.
									=			  Puesto que existe varios opciones de busqueda (busque - 
									=			  da con parametros como: Cedula, Nombre, Apellido, etc)
									=			  cuando se incia la busqueda, se seleccionan que parametros
									=			  son enviados al metodo de consumo mediante un condicional
									=			  switch, el cual indicara cual fue la opcion de busqueda
									=			  seleccionada. Debido a lo previamente planteado, para 
									=			  cada uno de los casos dentro del condicional switch
									=			  se adiciono esta seccion de codigo, causando que 
									=			  exista una misma seccion de codigo repetida 4 veces.
									=
									=		- QueryAdminViewModel: Entre las modificaciones mas notables
									=		tenemos =>
									=			+ Al igual que en el caso anterior, se modifico el 
									=			  constructor de la clase "QueryAdminViewModel". Estos
									=			  parametros son del tipo "Personas" y "Usuario", y su 
									=			  unica funcion es obtener el id (cedula) del usuario
									=			  que se encuentre haciendo la busqueda de usuarios en 
									=			  dicho momento.
									=			NOTA: AUNQUE ACTUALMENTE EL UNICO USUARIO CON ACCESO A 
									=			ESTA PAGINA ES EL USUARIO ADMINISTRATOR (Id = 0), SE 
									=			PLANEA PROPORCIONAR ACCESO A MAS USUARIOS EN ALGUNA 
									=			MODIFICACION.
									=			+ Anteriormente, debido a que el proyecto se encuentra 
									=			  trabajando stand alone, todo el codigo de consulta 
									=			  de la base de datos se realizaba dentro del metodo
									=			  ListaPersonas (<List<Personas>>). Todo este codigo 
									=			  fue mudado a un nuevo metodo que lleva por nombre
									=			  "ListaPersonasStandAlone".
									=			+ Se creo un nuevo metodo que lleva por nombre
									=			  "ListaPersonasHttpClient" (Task<List<Personas>>)
									=			  el cual contendra todos los comandos para realizar
									=			  el consumo de servicios web.
==========================================================================================================
==========================================================================================================
NOTAS:

4) PROPONER LA CREACION DE UNA CLAVE ESPECIAL PARA USUARIOS DE ALTO NIVEL, ESTO CON LA FINALIDAD DE 
   SOLICITAR DICHA CLAVE CADA QUE SE DECIDA CREAR UN USUARIO O UN NUEVO TABLERO DENTRO DE LA PLATAFORMA


LISTA DE PAGINAS MODIFICADAS PARA EL CONSUMO DE SERVICIOS WEB
-PaginaPrincial; PaginaPrincipalViewModel
-PaginaRegistro, PaginaConfiguracion; ConfiguracionAdminViewModel (P.1 => Registro de Usuario)
-DetailPage, MasterPage, UserMainPage; MasterDetailPageUserInforViewModel.cs; MasterDetailPageUserInfoModel
-PaginaConfiguracion, PaginaConfiguracionAdmin; ConfiguracionAdminViewModel (P.2 => Modificacion de Usuario)
-
==========================================================================================================
==========================================================================================================

